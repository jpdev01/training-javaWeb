Compartilhar atributos entre todos os servlets e JSP's da aplicação

* EM SERVLETS *
ServletContext ctx = getServletContext();

ctx.setAtributte(name, value);
String versao = ctx.getAttribute("versao");

* EM JSP *
<%
application.setAttribute(name, value);
application.setAttribute(name); // getAttribute sempre retorna um Object, mas se vc sabe o tipo que irá retornar, pode fazer um cast
%>

<%= application.getAttribute(name) %>

* ACESSO CONCORRENTE AOS ATRIBUTOS (ESCOPO SESSION) - cada cliente tem seu escopo. *
* OBS: Apenas o escopo request é thread-safe ( nos demais casos, pode dar problema se tiver mais clientes lendo ou alterando um atributo. )
ServletContext ctx = getServletContext();

synchronized(ctx)  ##garante acesso exclusivo ao objeto
{
ctx.setAttribute(name, value);
}

-> cada cliente ganha sua área exclusiva de atributos.



Algumas aplicações exigem que o servidor saiba quem é o cliente com qual ele esta lidando... = estado de conversassão
* Tela de login, carrinho, varias telas de cadastro
Isso pq o Protocolo Http não armazena estado (uma requisição não tem nada haver com a próxima.)

* Para salvar histórico de requisições e estados, usa-se a Session *
representada pela interface HttpSession
*EM servlet
HttpSession session = request.getSession();
session.setAttribute(name, value);
String test = session.getAttribute(name);

sessão do CLIENTE que faz a requisição: o reconhecimento de qual cliente faz a req fica por conta do contâiner!

* se você estiver acessando uma aplicação, e um atributo for colocado na sua sessão, numa requisição futura, a aplicação poderá ler esse atributo.

?? Como um servidor sabe quem é o cliente ???
- O servidor gera um ID único por cliente.